*** DESCRIPTION ***

paf grows patterns, which hold in a fuzzy tensor, hierarchically
amalgamates them and selects a subset of the built patterns to sum up
this tensor, a disjunctive box cluster model.


*** RETURN VALUES ***

paf returns values which can be used when called from a script.  They
are conformed to sysexit.h.
* 0 is returned when paf successfully terminates.
* 64 is returned when paf is incorrectly called.
* 65 is returned when an input data line is not properly formatted.
* 66 is returned when an input file cannot be read.
* 73 is returned when the output file cannot be written.


*** GENERAL ***

* paf called with option --help (or -h) displays a reminder of the
options.
* paf --version (or simply paf -V) displays version information.


*** OPTIONS ***

Any option passed to paf may be either specified on the command line
or in an option file.  If an option is present both in the option file
and on the command line, the latter is used.

The option file can be specified through option --opt.  When omitted,
a file named as the input pattern file + ".opt" is supposed to be the
option file related to the input pattern file.  For example, if the
input pattern file name is "patterns.txt" and "patterns.txt.opt"
exists, it is supposed to be the related option file.

The options have the same name in the option file as on the command
line.  Only long names can be used though.  Arguments passed to an
option are separated from the name of the option by "=".  As an
example, these lines may constitute an option file:
file = data.txt
amalgamate = 40000
ids = ": "
out = res/patterns.paf


*** INPUT DATA ***

The name of the file containing the input patterns is passed as an
argument to paf.  If omitted, /dev/stdin is used.

Every line must be either empty (it is ignored) or contain n fields:
the n dimensions of the pattern.  Several different separators may be
used to separate the fields and the same goes for the separations of
the elements in a dimension field.  The elements can be any string not
including any of the separators.  They must be all distinct.  Let us
take an example.  This line stands for the pattern ({01-09-2007,
02-09-2007}, {Thomas, Harry, Max}, {basketball, gymnastics}) and could
be part of an input pattern file:
01-09-2007,02-09-2007: Thomas,Harry,Max basketball,gymnastics

There are 3 dimensions here: the first one gathers dates, the second
pupils and the last one sports.  The fields are separated by the
characters ":" or/and " ".  The fact that two dimensions are separated
by several separators (in our example both ":" and " " separate the
dates from the pupils) does not raise any trouble.  In this pattern,
the elements in a same dimension are always separated by ",".

Options --pds and --pes respectively set the characters separating the
dimensions and the elements in a dimension or defaults (" " and ",",
respectively) are used.

In the previous example, assuming the patterns are listed in a file
named "patterns", paf is to be called as follows:
$ paf --pds ': ' --ids ': ' -f tensor patterns
There is, here, no need to specify the option --pes since the default
is correct.  Let us now discuss the two mandatory option that is used
in the command above.

The file defining the tensor in which the patterns hold must be given
through option --file (-f).  Every element involved in every pattern
must be present in the tensor.  The file format is similar to that of
the patterns but every non-empty line must have one additional field,
the last one, containing a float number in [0, 1], the membership
degree of any n-tuple that can be made by taking one element in each
of the n first fields.  For example, the following line stands for the
3-tuples (01-09-2007, Thomas, basketball) and (01-09-2007, Harry,
basketball) that both have the membership degree 0.1:
01-09-2007: Thomas,Harry basketball .1

The characters to separate the dimensions and the elements in a
dimensions are set with --ids and --ies.  Otherwise defaults are used:
" " to separate dimensions and "," to separate elements.  The n-tuples
that are left undefined are associated with null membership degrees.
If the membership degree of an n-tuple is defined several times in the
file, only the first definition holds.

Back to the example given earlier, the following call of paf grows the
patterns listed in the file named "patterns", these patterns hold in
the tensor specified through the file named "tensor", strings made of
":" and/or " " separate the dimensions in both files, and "," (the
default value) separates the elements in a dimension:
$ paf --pds ': ' --ids ': ' -f tensor patterns


*** SHIFT ***

By default, every membership value in the fuzzy tensor, including the
null values associated to tuples that are not specified in the input
tensor, is subtracted the density of the tensor.  Option --shift (-s)
sets another constant, in argument.  It must be a float in [0, 1].  A
larger constant focuses the search on smaller and denser patterns.

Option --expectation (-e) subtracts to every membership value the max
average density among those of the slices including the associated
tuple.  For example, the membership value associated with the tuple
(01-09-2007, Thomas, basketball) is decreased by either the average
membership value over all tuples involving 01-09-2007, or over all
tuples involving Thomas, or over all tuples involving basketball,
whichever is the greatest.  That option amounts to considering the
histograms of the slice densities have been analyzed and patterns of
interest are not mere consequences of these histograms: positive
correlations between the elements of the pattern exist.


*** GROWING AND/OR AMALGAMATING AND/OR SELECTING ***

By default, paf greedily grows every input pattern to maximize its
density and selects, by forward selection, a subset of the grown
patterns: a disjunctive box cluster model that fits but does not
overfit the fuzzy tensor the patterns hold in.

With option --grow (-g), paf further grows the patterns, until having
at most the number of patterns in argument of the option.  Indeed,
several input patterns may grow into a same grown pattern, effectively
reducing the number of grown patterns.  The argument 0 is accepted
too.  It means growing until the largest dimension of some pattern
would be infinitely extended.

Option --max (-m) disables verifying whether some input pattern is
sub-pattern of another one.  That situation never occurs if one single
execution of multidupehack, without option --unclosed (-u), provides
the input patterns.  If two CPU cores are available and a pipe inputs
the patterns at a rather low frequency, the option may increase the
real (wall clock) execution time, because it adds an additional step
after reading them all.

The intermediary patterns, with locally maximized densities, can still
be selected, unless option --ni is used.  That option indeed discards
the intermediary patterns.

Option --amalgamate (-a) is incompatible with option --grow (-g).  Its
argument has the same meaning as --grow's.  Nevertheless, --amalgamate
additionally triggers a hierarchical amalgamation of the grown
patterns.  Every time two patterns are amalgamated, the density of the
resulting amalgamate is greedily maximized.  In addition to the grown
patterns, the amalgamates with maximized density can be selected.

Option --ns disables the selection: every pattern that is built is
directly output.


*** INPUT DATA STORAGE AND MEMORY REQUIREMENTS ***

Unless option --expectation is used, paf can store the shifted fuzzy
tensor in a hybrid way: part of it in sparse structures and part of it
in dense structures.

Option --density (-d) must be given a float number, between 0 and 1,
in argument.  It defines a threshold at which a denser structure is
preferred.  It is 0 by default, i.e., dense structures are always
used.  At 1, space requirements are minimized.  That option is to be
used (usually with an argument close to 0, e.g., 0.001) when paf's
memory requirements exceed the available RAM because the fuzzy tensor
is very large (but also very sparse).

Amalgamating may require up to about eight bytes times the square of
the number --amalgamate is given in argument.  If the argument is
large, the candidate amalgamates may take far more space than the
tensor.  For example, the candidate amalgamates 'paf -a 40000' stores
take about 8 x 40,000Â² = 12.8 GB, unless there are actually fewer
grown patterns to amalgamate.  Also, the amalgamation time depends on
the cube of the number of patterns to amalgamate.


*** VERBOSITY ***

Option --verbose (-v) prints, on the standard output, paf's current
step.  The advancements of the "further growing", of the
"initialization of the amalgamation" and of the "amalgamation" steps
are given in percentages.


*** OUTPUT DATA ***

Output data looks like input data.  Each line consists of a pattern
and, in the last field, either its density or, using the option --pl,
the parameter associated with the pattern in the disjunctive box
cluster model.  The elements in every dimension of every pattern is
ordered by increasing density of the related slices of the shifted
fuzzy tensor.

Option --out (-o) sets the name of the file where patterns are output.
If omitted, /dev/stdout is used.

The dimensions are separated by a string specified through option
--ods (by default " ").  The elements are separated by a string
specified through option --oes (by default ",").

paf can append to each output pattern, additional information.  When
called with option --ps, paf prints the number of elements in each
dimension of the pattern.  When called with option --pa, paf prints
its area.  When called with option --ph, paf prints the line numbers
of the direct subpatterns that were selected as well.  In conjunction
with --ns, option --ph is ignored.  The separators can be specified:
* --sp sets the string prefixing the number of elements in each
dimension (by default " : ").
* --ss sets the string separating two such numbers (by default " ").
* --ap sets the string prefixing the area (by default " : ").
* --hp sets the string prefixing the line numbers of the direct
subpatterns that were selected as well (by default " : ").
* --hs sets the string separating two such numbers (by default " ").


*** BUGS ***

Report bugs to <lcerf@dcc.ufmg.br>.


*** COPYRIGHT ***

Copyright 2018-2020 LoÃ¯c Cerf (lcerf@dcc.ufmg.br)
This is free software.  You may redistribute copies of it under the
terms of the GNU General Public License
<http://www.gnu.org/licenses/gpl.html>.  There is NO WARRANTY, to the
extent permitted by law.